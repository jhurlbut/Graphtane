// Copyright (c) 2013-2014 Matthew Paul Reid

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#version 410 core

layout(quads, fractional_odd_spacing, ccw) in;

in vec3 csTexCoord[];
in vec3 csNormal[];

out	vec3 texCoord;
out vec3 normal;

uniform mat4 modelViewProj;

uniform sampler2D heightSampler;
uniform sampler2D normalSampler;

uniform float heightScale = 1.0;

vec3 interpolateTri(vec3 v0, vec3 v1, vec3 v2)
{
	return gl_TessCoord.x * v0 + gl_TessCoord.y * v1 +  gl_TessCoord.z * v2;
}

vec3 interpolateQuad(vec3 v0, vec3 v1, vec3 v2, vec3 v3)
{
	vec3 a = mix(v0, v1, gl_TessCoord.x);
	vec3 b = mix(v3, v2, gl_TessCoord.x);
	return mix(a, b, gl_TessCoord.y);
}

void main()
{
	vec3 pos = interpolateQuad(gl_in[0].gl_Position.xyz, gl_in[1].gl_Position.xyz, gl_in[2].gl_Position.xyz, gl_in[3].gl_Position.xyz);
	texCoord = interpolateQuad(csTexCoord[0], csTexCoord[1], csTexCoord[2], csTexCoord[3]);
	normal = interpolateQuad(csNormal[0], csNormal[1], csNormal[2], csNormal[3]);	
	
	float height = texture(heightSampler, texCoord.xy).r * heightScale;
	pos += normal * height;
	
	gl_Position = modelViewProj * vec4(pos, 1);
}